import "../common/models.tsp";
import "../chat/models.tsp";

using TypeSpec.OpenAPI;

namespace OpenAI;

model CreateCompletionRequest {
  /**
   * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to
   * see all of your available models, or see our [Model overview](/docs/models/overview) for
   * descriptions of them.
   */
  @extension("x-oaiTypeLabel", "string")
  `model`: string | COMPLETION_MODELS;

  /**
   * The prompt(s) to generate completions for, encoded as a string, array of strings, array of
   * tokens, or array of token arrays.
   *
   * Note that <|endoftext|> is the document separator that the model sees during training, so if a
   * prompt is not specified the model will generate as if from the beginning of a new document.
   */
  // TODO: consider inlining when https://github.com/microsoft/typespec/issues/2356 fixed
  prompt: Prompt | null = "<|endoftext|>";

  /**
   * Generates `best_of` completions server-side and returns the "best" (the one with the highest
   * log probability per token). Results cannot be streamed.
   *
   * When used with `n`, `best_of` controls the number of candidate completions and `n` specifies
   * how many to return â€“ `best_of` must be greater than `n`.
   *
   * **Note:** Because this parameter generates many completions, it can quickly consume your token
   * quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
   */
  @minValue(0)
  @maxValue(20)
  best_of?: safeint | null = 1;

  /** Echo back the prompt in addition to the completion */
  echo?: boolean | null = false;

  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing
   * frequency in the text so far, decreasing the model's likelihood to repeat the same line
   * verbatim.
   *
   * [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
   */
  @minValue(-2)
  @maxValue(2)
  frequency_penalty?: float64 | null = 0;

  /**
   * Modify the likelihood of specified tokens appearing in the completion.
   * 
   * Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an
   * associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe)
   * to convert text to token IDs. Mathematically, the bias is added to the logits generated by the
   * model prior to sampling. The exact effect will vary per model, but values between -1 and 1
   * should decrease or increase likelihood of selection; values like -100 or 100 should result in a
   * ban or exclusive selection of the relevant token.
   * 
   * As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being
   * generated.
   */
  @extension("x-oaiTypeLabel", "map")
  logit_bias?: Record<safeint> | null = null;

  /**
   * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens.
   * For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The
   * API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1`
   * elements in the response.
   *
   * The maximum value for `logprobs` is 5.
   */
  @minValue(0)
  @maxValue(5)
  logprobs?: safeint | null = null;

  /**
   * The maximum number of [tokens](/tokenizer) to generate in the completion.
   *
   * The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)
   * for counting tokens.
   */
  @minValue(0)
  max_tokens?: safeint | null = 16;

  /**
   * How many completions to generate for each prompt.
   *
   * **Note:** Because this parameter generates many completions, it can quickly consume your token
   * quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
   */
  @minValue(1)
  @maxValue(128)
  n?: safeint | null = 1;

  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear
   * in the text so far, increasing the model's likelihood to talk about new topics.
   *
   * [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
   */
  @minValue(-2)
  @maxValue(2)
  presence_penalty?: float64 | null = 0;

  /** 
   * If specified, our system will make a best effort to sample deterministically, such that
   * repeated requests with the same `seed` and parameters should return the same result.
   * 
   * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response
   * parameter to monitor changes in the backend.
   */
  @extension(
    "x-oaiMeta",
    { 
      beta: true
    }
  )
  @minValue(-9223372036854775808) // TODO: Min and max exceed the limits of safeint.
  @maxValue(9223372036854775807)
  seed?: safeint | null;

  // TODO: Consider inlining when https://github.com/microsoft/typespec/issues/2356 is resolved
  // https://github.com/microsoft/typespec/issues/2355
  /** Up to 4 sequences where the API will stop generating further tokens. */
  stop?: Stop | null = null;

  /**
   * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only
   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
   * as they become available, with the stream terminated by a `data: [DONE]` message.
   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
   */
  stream?: boolean | null = false;

  /** The suffix that comes after a completion of inserted text. */
  suffix?: string | null = null;

  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
   * more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   * We generally recommend altering this or `top_p` but not both.
   */
  @minValue(0)
  @maxValue(2)
  temperature?: float64 | null = 1;

  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers
   * the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising
   * the top 10% probability mass are considered.
   *
   * We generally recommend altering this or `temperature` but not both.
   */
  @minValue(0)
  @maxValue(1)
  top_p?: float64 | null = 1;

  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect
   * abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
   */
  user?: User;
}

/**
 * Represents a completion response from the API. Note: both the streamed and non-streamed response
 * objects share the same shape (unlike the chat endpoint).
 */
model CreateCompletionResponse {
  /** A unique identifier for the completion. */
  id: string;

  /** The list of completion choices the model generated for the input. */
  choices: {
    index: safeint;
    text: string;
    logprobs: null | {
      tokens: string[];
      token_logprobs: float64[];
      top_logprobs: Record<safeint>[];
      text_offset: safeint[];
    };

    /**
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a
     * natural stop point or a provided stop sequence, or `content_filter` if content was omitted
     * due to a flag from our content filters, `length` if the maximum number of tokens specified
     * in the request was reached, or `content_filter` if content was omitted due to a flag from our
     * content filters.
     */
    // TODO: The generated spec includes other values like "tool_calls" and "function_call".
    // Is it because we're importing /chat/models.tsp?
    finish_reason: "stop" | "length" | "content_filter";
  }[];

  /** The Unix timestamp (in seconds) of when the completion was created. */
  @encode("unixTimestamp", int32)
  created: utcDateTime;

  /** The model used for the completion. */
  `model`: string;

  /**
   * This fingerprint represents the backend configuration that the model runs with.
   * 
   * Can be used in conjunction with the `seed` request parameter to understand when backend changes
   * have been made that might impact determinism.
   */
  system_fingerprint?: string;

  /** The object type, which is always `text_completion`. */
  object: "text_completion";

  /** Usage statistics for the completion request. */
  usage?: CompletionUsage;
}

alias COMPLETION_MODELS =
  | "gpt-3.5-turbo-instruct"
  | "davinci-002"
  | "babbage-002";

@oneOf
union Prompt {
  string,
  string[],
  TokenArray,
  TokenArrayArray,
}