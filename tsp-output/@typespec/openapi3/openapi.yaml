openapi: 3.0.0
info:
  title: OpenAI API
  version: 2.0.0
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
tags:
  - name: Fine-tuning
  - name: Audio
  - name: Assistants
  - name: Chat
  - name: Completions
  - name: Embeddings
  - name: Files
  - name: Images
  - name: Models
  - name: Moderations
paths:
  /assistants:
    post:
      tags:
        - Assistants
      operationId: createAssistant
      summary: Create an assistant with a model and instructions.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssistantRequest'
    get:
      tags:
        - Assistants
      operationId: listAssistants
      summary: Returns a list of assistants.
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            type: string
            enum:
              - asc
              - desc
              - desc
              - desc
              - desc
              - desc
              - desc
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssistantsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /assistants/{assistant_id}:
    get:
      tags:
        - Assistants
      operationId: getAssistant
      summary: Retrieves an assistant.
      parameters:
        - name: assistant_id
          in: path
          required: true
          description: The ID of the assistant to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Assistants
      operationId: modifyAssistant
      summary: Modifies an assistant.
      parameters:
        - name: assistant_id
          in: path
          required: true
          description: The ID of the assistant to modify.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAssistantRequest'
    delete:
      tags:
        - Assistants
      operationId: deleteAssistant
      summary: Delete an assistant.
      parameters:
        - name: assistant_id
          in: path
          required: true
          description: The ID of the assistant to delete.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAssistantResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /assistants/{assistant_id}/files:
    post:
      tags:
        - Assistants
      operationId: createAssistantFile
      summary: |-
        Create an assistant file by attaching a [File](/docs/api-reference/files) to a
        [assistant](/docs/api-reference/assistants).
      parameters:
        - name: assistant_id
          in: path
          required: true
          description: The ID of the assistant for which to create a file.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantFileObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssistantFileRequest'
    get:
      tags:
        - Assistants
      operationId: listAssistantFiles
      summary: Returns a list of assistant files.
      parameters:
        - name: assistant_id
          in: path
          required: true
          description: The ID of the assistant the file belongs to.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            type: string
            enum:
              - asc
              - desc
              - desc
              - desc
              - desc
              - desc
              - desc
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssistantFilesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /assistants/{assistant_id}/files/{file_id}:
    get:
      tags:
        - Assistants
      operationId: getAssistantFile
      summary: Retrieves an assistant file.
      parameters:
        - name: assistant_id
          in: path
          required: true
          description: The ID of the assistant the file belongs to.
          schema:
            type: string
        - name: file_id
          in: path
          required: true
          description: The ID of the file we're getting.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantFileObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Assistants
      operationId: deleteAssistantFile
      summary: Delete an assistant file.
      parameters:
        - name: assistant_id
          in: path
          required: true
          description: The ID of the assistant the file belongs to.
          schema:
            type: string
        - name: file_id
          in: path
          required: true
          description: The ID of the file to delete.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAssistantFileResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /audio/speech:
    post:
      tags:
        - Audio
      operationId: createSpeech
      summary: Generates audio from the input text.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          headers:
            Transfer-Encoding:
              required: false
              description: chunked
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeechRequest'
  /audio/transcriptions:
    post:
      tags:
        - Audio
      operationId: createTranscription
      summary: Transcribes audio into the input language.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTranscriptionResponse'
            text/plain:
              schema:
                type: string
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranscriptionRequestMultiPart'
  /audio/translations:
    post:
      tags:
        - Audio
      operationId: createTranslation
      summary: Translates audio into English..
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTranslationResponse'
            text/plain:
              schema:
                type: string
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequestMultiPart'
  /chat/completions:
    post:
      tags:
        - Chat
      operationId: createChatCompletion
      summary: Creates a model response for the given chat conversation.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatCompletionRequest'
  /completions:
    post:
      tags:
        - Completions
      operationId: createCompletion
      summary: Creates a completion for the provided prompt and parameters.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCompletionResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompletionRequest'
  /embeddings:
    post:
      tags:
        - Embeddings
      operationId: createEmbedding
      summary: Creates an embedding vector representing the input text.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmbeddingResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmbeddingRequest'
  /files:
    post:
      tags:
        - Files
      operationId: createFile
      summary: |-
        Upload a file that can be used across various endpoints. The size of all the files uploaded by
        one organization can be up to 100 GB.

        The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See
        the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files
        supported. The Fine-tuning API only supports `.jsonl` files.

        Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFile'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateFileRequestMultiPart'
    get:
      tags:
        - Files
      operationId: listFiles
      summary: Returns a list of files that belong to the user's organization.
      parameters:
        - name: purpose
          in: query
          required: false
          description: Only return files with the given purpose.
          schema:
            type: string
            enum:
              - fine-tune
              - fine-tune-results
              - assistants
              - assistants_output
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /files/{file_id}:
    get:
      tags:
        - Files
      operationId: retrieveFile
      summary: Returns information about a specific file.
      parameters:
        - name: file_id
          in: path
          required: true
          description: The ID of the file to use for this request.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFile'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Files
      operationId: deleteFile
      summary: Delete a file
      parameters:
        - name: file_id
          in: path
          required: true
          description: The ID of the file to use for this request.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFileResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /files/{file_id}/content:
    get:
      tags:
        - Files
      operationId: downloadFile
      summary: Returns the contents of the specified file.
      parameters:
        - name: file_id
          in: path
          required: true
          description: The ID of the file to use for this request.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fine-tunes:
    post:
      tags:
        - Fine-tuning
      operationId: createFineTune
      summary: |-
        Creates a job that fine-tunes a specified model from a given dataset.

        Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.

        [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTune'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFineTuneRequest'
      deprecated: true
    get:
      tags:
        - Fine-tuning
      operationId: listFineTunes
      summary: List your organization's fine-tuning jobs
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFineTunesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /fine-tunes/{fine_tune_id}:
    get:
      tags:
        - Fine-tuning
      operationId: retrieveFineTune
      summary: |-
        Gets info about the fine-tune job.

        [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
      parameters:
        - name: fine_tune_id
          in: path
          required: true
          description: The ID of the fine-tune job
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTune'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /fine-tunes/{fine_tune_id}/cancel:
    post:
      tags:
        - Fine-tuning
      operationId: cancelFineTune
      summary: Immediately cancel a fine-tune job.
      parameters:
        - name: fine_tune_id
          in: path
          required: true
          description: The ID of the fine-tune job to cancel
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTune'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /fine-tunes/{fine_tune_id}/events:
    get:
      tags:
        - Fine-tuning
      operationId: listFineTuneEvents
      summary: Get fine-grained status updates for a fine-tune job.
      parameters:
        - name: fine_tune_id
          in: path
          required: true
          description: The ID of the fine-tune job to get events for.
          schema:
            type: string
        - name: stream
          in: query
          required: false
          description: |-
            Whether to stream events for the fine-tune job. If set to true, events will be sent as
            data-only
            [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
            as they become available. The stream will terminate with a `data: [DONE]` message when the
            job is finished (succeeded, cancelled, or failed).

            If set to false, only events generated so far will be returned.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFineTuneEventsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /fine_tuning/jobs:
    post:
      tags:
        - Fine-tuning
      operationId: createFineTuningJob
      description: |-
        Creates a job that fine-tunes a specified model from a given dataset.

        Response includes details of the enqueued job including job status and the name of the
        fine-tuned models once complete.

        [Learn more about fine-tuning](/docs/guides/fine-tuning)
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJob'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFineTuningJobRequest'
    get:
      tags:
        - Fine-tuning
      operationId: listPaginatedFineTuningJobs
      parameters:
        - name: after
          in: query
          required: false
          description: Identifier for the last job from the previous pagination request.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Number of fine-tuning jobs to retrieve.
          schema:
            type: integer
            format: int64
            default: 20
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPaginatedFineTuningJobsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fine_tuning/jobs/{fine_tuning_job_id}:
    get:
      tags:
        - Fine-tuning
      operationId: retrieveFineTuningJob
      summary: |-
        Get info about a fine-tuning job.

        [Learn more about fine-tuning](/docs/guides/fine-tuning)
      parameters:
        - name: fine_tuning_job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJob'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fine_tuning/jobs/{fine_tuning_job_id}/cancel:
    post:
      tags:
        - Fine-tuning
      operationId: cancelFineTuningJob
      summary: Immediately cancel a fine-tune job.
      parameters:
        - name: fine_tuning_job_id
          in: path
          required: true
          description: The ID of the fine-tuning job to cancel.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJob'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /fine_tuning/jobs/{fine_tuning_job_id}/events:
    get:
      tags:
        - Fine-tuning
      operationId: listFineTuningEvents
      summary: Get status updates for a fine-tuning job.
      parameters:
        - name: fine_tuning_job_id
          in: path
          required: true
          description: The ID of the fine-tuning job to get events for.
          schema:
            type: string
        - name: after
          in: query
          required: false
          description: Identifier for the last event from the previous pagination request.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Number of events to retrieve.
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFineTuningJobEventsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/edits:
    post:
      tags:
        - Images
      operationId: createImageEdit
      summary: Creates an edited or extended image given an original image and a prompt.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageEditRequestMultiPart'
  /images/generations:
    post:
      tags:
        - Images
      operationId: createImage
      summary: Creates an image given a prompt
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageRequest'
  /images/variations:
    post:
      tags:
        - Images
      operationId: createImageVariation
      summary: Creates an edited or extended image given an original image and a prompt.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageVariationRequestMultiPart'
  /models:
    get:
      tags:
        - Models
      operationId: listModels
      summary: |-
        Lists the currently available models, and provides basic information about each one such as the
        owner and availability.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /models/{model}:
    get:
      tags:
        - Models
      operationId: retrieveModel
      summary: |-
        Retrieves a model instance, providing basic information about the model such as the owner and
        permissioning.
      parameters:
        - name: model
          in: path
          required: true
          description: The ID of the model to use for this request.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Models
      operationId: deleteModel
      summary: Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
      parameters:
        - name: model
          in: path
          required: true
          description: The model to delete
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteModelResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /moderations:
    post:
      tags:
        - Moderations
      operationId: createModeration
      summary: Classifies if text violates OpenAI's Content Policy
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModerationResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModerationRequest'
  /threads:
    post:
      tags:
        - Assistants
      operationId: createThread
      summary: Create a thread.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThreadRequest'
  /threads/runs:
    post:
      tags:
        - Assistants
      operationId: createThreadAndRun
      summary: Create a thread and run it in one request.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThreadAndRunRequest'
  /threads/{thread_id}:
    get:
      tags:
        - Assistants
      operationId: getThread
      summary: Retrieves a thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Assistants
      operationId: modifyThread
      summary: Modifies a thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to modify. Only the `metadata` can be modified.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyThreadRequest'
    delete:
      tags:
        - Assistants
      operationId: deleteThread
      summary: Delete a thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to delete.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteThreadResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/messages:
    post:
      tags:
        - Assistants
      operationId: createMessage
      summary: Create a message.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) to create a message for.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
    get:
      tags:
        - Assistants
      operationId: listMessages
      summary: Returns a list of messages for a given thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) the messages belong to.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            type: string
            enum:
              - asc
              - desc
              - desc
              - desc
              - desc
              - desc
              - desc
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/messages/{message_id}:
    get:
      tags:
        - Assistants
      operationId: getMessage
      summary: Retrieve a message.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          description: The ID of the message to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Assistants
      operationId: modifyMessage
      summary: Modifies a message.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to which this message belongs.
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          description: The ID of the message to modify.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyMessageRequest'
  /threads/{thread_id}/messages/{message_id}/files:
    get:
      tags:
        - Assistants
      operationId: listMessageFiles
      summary: Returns a list of message files.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread that the message and files belong to.
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          description: The ID of the message that the files belongs to.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            type: string
            enum:
              - asc
              - desc
              - desc
              - desc
              - desc
              - desc
              - desc
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessageFilesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/messages/{message_id}/files/{file_id}:
    get:
      tags:
        - Assistants
      operationId: getMessageFile
      summary: Retrieves a message file.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to which the message and File belong.
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          description: The ID of the message the file belongs to.
          schema:
            type: string
        - name: file_id
          in: path
          required: true
          description: The ID of the file being retrieved.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageFileObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/runs:
    post:
      tags:
        - Assistants
      operationId: createRun
      summary: Create a run.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to run.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRunRequest'
    get:
      tags:
        - Assistants
      operationId: listRuns
      summary: Returns a list of runs belonging to a thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread the run belongs to.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            type: string
            enum:
              - asc
              - desc
              - desc
              - desc
              - desc
              - desc
              - desc
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/runs/{run_id}:
    get:
      tags:
        - Assistants
      operationId: getRun
      summary: Retrieves a run.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) that was run.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Assistants
      operationId: modifyRun
      summary: Modifies a run.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) that was run.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run to modify.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyRunRequest'
  /threads/{thread_id}/runs/{run_id}/cancel:
    post:
      tags:
        - Assistants
      operationId: cancelRun
      summary: Cancels a run that is `in_progress`.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to which this run belongs.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run to cancel.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/runs/{run_id}/steps:
    get:
      tags:
        - Assistants
      operationId: listRunSteps
      summary: Returns a list of run steps belonging to a run.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread the run and run steps belong to.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run the run steps belong to.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            type: string
            enum:
              - asc
              - desc
              - desc
              - desc
              - desc
              - desc
              - desc
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunStepsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/runs/{run_id}/steps/{step_id}:
    get:
      tags:
        - Assistants
      operationId: getRunStep
      summary: Retrieves a run step.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to which the run and run step belongs.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run to which the run step belongs.
          schema:
            type: string
        - name: step_id
          in: path
          required: true
          description: The ID of the run step to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStepObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/runs/{run_id}/submit_tool_outputs:
    post:
      tags:
        - Assistants
      operationId: submitToolOuputsToRun
      summary: |-
        When a run has the `status: "requires_action"` and `required_action.type` is
        `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once
        they're all completed. All outputs must be submitted in a single request.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run that requires the tool output submission.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitToolOutputsRunRequest'
security:
  - BearerAuth: []
components:
  schemas:
    AssistantFileObject:
      type: object
      required:
        - id
        - object
        - created_at
        - assistant_id
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - assistant.file
          description: The object type, which is always `assistant.file`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the assistant file was created.
        assistant_id:
          type: string
          description: The assistant ID that the file is attached to.
      description: A list of [Files](/docs/api-reference/files) attached to an `assistant`.
    AssistantObject:
      type: object
      required:
        - id
        - object
        - created_at
        - name
        - description
        - model
        - instructions
        - tools
        - file_ids
        - metadata
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - assistant
          description: The object type, which is always `assistant`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the assistant was created.
        name:
          type: string
          nullable: true
          maxLength: 256
          description: The name of the assistant. The maximum length is 256 characters.
        description:
          type: string
          nullable: true
          maxLength: 512
          description: The description of the assistant. The maximum length is 512 characters.
        model:
          type: string
          description: |-
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to
            see all of your available models, or see our [Model overview](/docs/models/overview) for
            descriptions of them.
        instructions:
          type: string
          nullable: true
          maxLength: 32768
          description: The system instructions that the assistant uses. The maximum length is 32768 characters.
        tools:
          allOf:
            - $ref: '#/components/schemas/CreateAssistantRequestToolsItem'
          description: |-
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant.
            Tools can be of types `code_interpreter`, `retrieval`, or `function`.
          default: []
        file_ids:
          type: array
          items:
            type: string
          maxItems: 20
          description: |-
            A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a
            maximum of 20 files attached to the assistant. Files are ordered by their creation date in
            ascending order.
          default: []
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
      description: Represents an `assistant` that can call the model and use tools.
    AssistantToolsCode:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - code_interpreter
          description: 'The type of tool being defined: `code_interpreter`'
    AssistantToolsFunction:
      type: object
      required:
        - type
        - function
      properties:
        type:
          type: string
          enum:
            - function
          description: 'The type of tool being defined: `function`'
        function:
          $ref: '#/components/schemas/FunctionObject'
    AssistantToolsRetrieval:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - retrieval
          description: 'The type of tool being defined: `retrieval`'
    AudioSegment:
      type: object
      required:
        - id
        - seek
        - start
        - end
        - text
        - tokens
        - temperature
        - avg_logprob
        - compression_ratio
        - no_speech_prob
      properties:
        id:
          type: integer
          format: int64
          description: The zero-based index of this segment.
        seek:
          type: integer
          format: int64
          description: |-
            The seek position associated with the processing of this audio segment. Seek positions are
            expressed as hundredths of seconds. The model may process several segments from a single seek
            position, so while the seek position will never represent a later time than the segment's
            start, the segment's start may represent a significantly later time than the segment's
            associated seek position.
        start:
          type: number
          format: double
          description: The time at which this segment started relative to the beginning of the audio.
        end:
          type: number
          format: double
          description: The time at which this segment ended relative to the beginning of the audio.
        text:
          type: string
          description: The text that was part of this audio segment.
        tokens:
          allOf:
            - $ref: '#/components/schemas/TokenArrayItem'
          description: The token IDs matching the text in this audio segment.
        temperature:
          type: number
          format: double
          minimum: 0
          maximum: 1
          description: The temperature score associated with this audio segment.
        avg_logprob:
          type: number
          format: double
          description: The average log probability associated with this audio segment.
        compression_ratio:
          type: number
          format: double
          description: The compression ratio of this audio segment.
        no_speech_prob:
          type: number
          format: double
          description: The probability of no speech detection within this audio segment.
    ChatCompletionFunctionCallOption:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the function to call.
      description: |-
        Specifying a particular function via `{"name": "my_function"}` forces the model to call that
        function.
    ChatCompletionFunctions:
      type: object
      required:
        - name
      properties:
        description:
          type: string
          description: |-
            A description of what the function does, used by the model to choose when and how to call the
            function.
        name:
          type: string
          description: |-
            The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and
            dashes, with a maximum length of 64.
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
      deprecated: true
    ChatCompletionMessageToolCall:
      type: object
      required:
        - id
        - type
        - function
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: |-
                The arguments to call the function with, as generated by the model in JSON format. Note that
                the model does not always generate valid JSON, and may hallucinate parameters not defined by
                your function schema. Validate the arguments in your code before calling your function.
          required:
            - name
            - arguments
          description: The function that the model called.
    ChatCompletionMessageToolCallsItem:
      type: array
      items:
        $ref: '#/components/schemas/ChatCompletionMessageToolCall'
      description: The tool calls generated by the model, such as function calls.
    ChatCompletionNamedToolChoice:
      type: object
      required:
        - type
        - function
      properties:
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
          required:
            - name
      description: Specifies a tool the model should use. Use to force the model to call a specific function.
    ChatCompletionRequestAssistantMessage:
      type: object
      required:
        - role
      properties:
        content:
          type: string
          nullable: true
          description: |-
            The contents of the assistant message. Required unless `tool_calls` or `function_call` is'
            specified.
        role:
          type: string
          enum:
            - assistant
          description: The role of the messages author, in this case `assistant`.
        name:
          type: string
          description: |-
            An optional name for the participant. Provides the model information to differentiate between
            participants of the same role.
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCallsItem'
        function_call:
          type: object
          properties:
            arguments:
              type: string
              description: |-
                The arguments to call the function with, as generated by the model in JSON format. Note that
                the model does not always generate valid JSON, and may hallucinate parameters not defined by
                your function schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
            - arguments
            - name
          description: |-
            Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be
            called, as generated by the model.
          deprecated: true
    ChatCompletionRequestFunctionMessage:
      type: object
      required:
        - role
        - content
        - name
      properties:
        role:
          type: string
          enum:
            - function
          description: The role of the messages author, in this case `function`.
        content:
          type: string
          nullable: true
          description: The contents of the function message.
        name:
          type: string
          description: The name of the function to call.
    ChatCompletionRequestMessage:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
      x-oaiExpandable: true
    ChatCompletionRequestMessageContentPart:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage'
      x-oaiExpandable: true
    ChatCompletionRequestMessageContentPartImage:
      type: object
      required:
        - type
        - image_url
      properties:
        type:
          type: string
          enum:
            - image_url
          description: The type of the content part.
        image_url:
          type: object
          properties:
            url:
              anyOf:
                - type: string
                  format: uri
                - type: string
              description: Either a URL of the image or the base64 encoded image data.
            detail:
              type: string
              enum:
                - auto
                - low
                - high
              description: |-
                Specifies the detail level of the image. Learn more in the
                [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
              default: auto
          required:
            - url
    ChatCompletionRequestMessageContentPartText:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum:
            - text
            - json_object
          description: The type of the content part.
        text:
          type: string
          description: The text content.
    ChatCompletionRequestMessageContentParts:
      type: array
      items:
        $ref: '#/components/schemas/ChatCompletionRequestMessageContentPart'
      minItems: 1
    ChatCompletionRequestSystemMessage:
      type: object
      required:
        - content
        - role
      properties:
        content:
          type: string
          description: The contents of the system message.
          x-oaiExpandable: true
        role:
          type: string
          enum:
            - system
          description: The role of the messages author, in this case `system`.
        name:
          type: string
          description: |-
            An optional name for the participant. Provides the model information to differentiate between
            participants of the same role.
    ChatCompletionRequestToolMessage:
      type: object
      required:
        - role
        - content
        - tool_call_id
      properties:
        role:
          type: string
          enum:
            - tool
          description: The role of the messages author, in this case `tool`.
        content:
          type: string
          description: The contents of the tool message.
        tool_call_id:
          type: string
          description: Tool call that this message is responding to.
    ChatCompletionRequestUserMessage:
      type: object
      required:
        - content
        - role
      properties:
        content:
          allOf:
            - $ref: '#/components/schemas/ChatCompletionRequestUserMessageContent'
          description: The contents of the system message.
          x-oaiExpandable: true
        role:
          type: string
          enum:
            - user
            - assistant
          description: The role of the messages author, in this case `user`.
        name:
          type: string
          description: |-
            An optional name for the participant. Provides the model information to differentiate between
            participants of the same role.
    ChatCompletionRequestUserMessageContent:
      oneOf:
        - type: string
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentParts'
    ChatCompletionResponseMessage:
      type: object
      required:
        - content
        - role
      properties:
        content:
          type: string
          nullable: true
          description: The contents of the message.
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCallsItem'
        role:
          type: string
          enum:
            - assistant
          description: The role of the author of this message.
        function_call:
          type: object
          properties:
            arguments:
              type: string
              description: |-
                The arguments to call the function with, as generated by the model in JSON format. Note that
                the model does not always generate valid JSON, and may hallucinate parameters not defined by
                your function schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
            - arguments
            - name
          description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
          deprecated: true
    ChatCompletionTokenLogprob:
      type: object
      required:
        - token
        - logprob
        - bytes
        - top_logprobs
      properties:
        token:
          type: string
          description: The token.
        logprob:
          type: number
          format: double
          description: The log probability of this token.
        bytes:
          type: array
          items:
            type: integer
            format: int64
          nullable: true
          description: |-
            A list of integers representing the UTF-8 bytes representation of the token. Useful in
            instances where characters are represented by multiple tokens and their byte representations
            must be combined to generate the correct text representation. Can be `null` if there is no
            bytes representation for the token.
        top_logprobs:
          type: array
          items:
            type: object
            properties:
              token:
                type: string
                description: The token.
              logprob:
                type: number
                format: double
                description: The log probability of this token.
              bytes:
                type: array
                items:
                  type: integer
                  format: int64
                nullable: true
                description: |-
                  A list of integers representing the UTF-8 bytes representation of the token. Useful in
                  instances where characters are represented by multiple tokens and their byte representations
                  must be combined to generate the correct text representation. Can be `null` if there is no
                  bytes representation for the token.
            required:
              - token
              - logprob
              - bytes
          description: |-
            List of the most likely tokens and their log probability, at this token position. In rare
            cases, there may be fewer than the number of requested `top_logprobs` returned.
    ChatCompletionTool:
      type: object
      required:
        - type
        - function
      properties:
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          $ref: '#/components/schemas/FunctionObject'
    ChatCompletionToolChoiceOption:
      oneOf:
        - type: string
          enum:
            - none
            - auto
            - auto
        - $ref: '#/components/schemas/ChatCompletionNamedToolChoice'
      description: |-
        Controls which (if any) function is called by the model. `none` means the model will not call a
        function and instead generates a message. `auto` means the model can pick between generating a
        message or calling a function. Specifying a particular function via
        `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that
        function.

        `none` is the default when no functions are present. `auto` is the default if functions are
        present.
      x-oaiExpandable: true
    CompletionUsage:
      type: object
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      properties:
        prompt_tokens:
          type: integer
          format: int64
          description: Number of tokens in the prompt.
        completion_tokens:
          type: integer
          format: int64
          description: Number of tokens in the generated completion
        total_tokens:
          type: integer
          format: int64
          description: Total number of tokens used in the request (prompt + completion).
      description: Usage statistics for the completion request.
    CreateAssistantFileRequest:
      type: object
      required:
        - file_id
      properties:
        file_id:
          type: string
          description: |-
            A [File](/docs/api-reference/files) ID (with `purpose="assistants"`) that the assistant should
            use. Useful for tools like `retrieval` and `code_interpreter` that can access files.
    CreateAssistantRequest:
      type: object
      required:
        - model
      properties:
        model:
          type: string
          description: |-
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to
            see all of your available models, or see our [Model overview](/docs/models/overview) for
            descriptions of them.
        name:
          type: string
          nullable: true
          maxLength: 256
          description: The name of the assistant. The maximum length is 256 characters.
        description:
          type: string
          nullable: true
          maxLength: 512
          description: The description of the assistant. The maximum length is 512 characters.
        instructions:
          type: string
          nullable: true
          maxLength: 32768
          description: The system instructions that the assistant uses. The maximum length is 32768 characters.
        tools:
          allOf:
            - $ref: '#/components/schemas/CreateAssistantRequestToolsItem'
          description: |-
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant.
            Tools can be of types `code_interpreter`, `retrieval`, or `function`.
          default: []
        file_ids:
          type: array
          items:
            type: string
          maxItems: 20
          description: |-
            A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a
            maximum of 20 files attached to the assistant. Files are ordered by their creation date in
            ascending order.
          default: []
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    CreateAssistantRequestTool:
      oneOf:
        - $ref: '#/components/schemas/AssistantToolsCode'
        - $ref: '#/components/schemas/AssistantToolsRetrieval'
        - $ref: '#/components/schemas/AssistantToolsFunction'
      x-oaiExpandable: true
    CreateAssistantRequestToolsItem:
      type: array
      items:
        $ref: '#/components/schemas/CreateAssistantRequestTool'
      maxItems: 128
    CreateChatCompletionRequest:
      type: object
      required:
        - messages
        - model
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionRequestMessage'
          minItems: 1
          description: |-
            A list of messages comprising the conversation so far.
            [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - gpt-4-0125-preview
                - gpt-4-turbo-preview
                - gpt-4-1106-preview
                - gpt-4-vision-preview
                - gpt-4
                - gpt-4-0314
                - gpt-4-0613
                - gpt-4-32k
                - gpt-4-32k-0314
                - gpt-4-32k-0613
                - gpt-3.5-turbo
                - gpt-3.5-turbo-16k
                - gpt-3.5-turbo-0301
                - gpt-3.5-turbo-0613
                - gpt-3.5-turbo-1106
                - gpt-3.5-turbo-16k-0613
          description: |-
            ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility)
            table for details on which models work with the Chat API.
          x-oaiTypeLabel: string
        frequency_penalty:
          type: number
          format: double
          nullable: true
          minimum: -2
          maximum: 2
          description: |-
            Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing
            frequency in the text so far, decreasing the model's likelihood to repeat the same line
            verbatim.

            [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
          default: 0
        logit_bias:
          type: object
          additionalProperties:
            type: integer
            format: int64
          nullable: true
          description: |-
            Modify the likelihood of specified tokens appearing in the completion.

            Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an
            associated bias value from -100 to 100. Mathematically, the bias is added to the logits
            generated by the model prior to sampling. The exact effect will vary per model, but values
            between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100
            should result in a ban or exclusive selection of the relevant token.
          x-oaiTypeLabel: map
          default: null
        logprobs:
          type: boolean
          nullable: true
          description: |-
            Whether to return log probabilities of the output tokens or not. If true, returns the log
            probabilities of each output token returned in the `content` of `message`. This option is
            currently not available on the `gpt-4-vision-preview` model.
          default: false
        top_logprobs:
          type: integer
          format: int64
          nullable: true
          minimum: 0
          maximum: 5
          description: |-
            An integer between 0 and 5 specifying the number of most likely tokens to return at each token
            position, each with an associated log probability. `logprobs` must be set to `true` if this
            parameter is used.
        max_tokens:
          type: integer
          format: int64
          nullable: true
          minimum: 0
          description: |-
            The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.

            The total length of input tokens and generated tokens is limited by the model's context length.
            [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
            for counting tokens.
          default: 16
        n:
          type: integer
          format: int64
          nullable: true
          minimum: 1
          maximum: 128
          description: |-
            How many chat completion choices to generate for each input message. Note that you will be
            charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to
            minimize costs.
          default: 1
        presence_penalty:
          type: number
          format: double
          nullable: true
          minimum: -2
          maximum: 2
          description: |-
            Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear
            in the text so far, increasing the model's likelihood to talk about new topics.

            [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
          default: 0
        response_format:
          type: object
          properties:
            type:
              type: string
              enum:
                - text
                - json_object
              description: Must be one of `text` or `json_object`.
              default: text
          description: |-
            An object specifying the format that the model must output. Compatible with
            [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and `gpt-3.5-turbo-1106`.

            Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the
            model generates is valid JSON.

            **Important:** when using JSON mode, you **must** also instruct the model to produce JSON
            yourself via a system or user message. Without this, the model may generate an unending stream
            of whitespace until the generation reaches the token limit, resulting in a long-running and
            seemingly "stuck" request. Also note that the message content may be partially cut off if
            `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the
            conversation exceeded the max context length.
        seed:
          type: integer
          format: int64
          nullable: true
          minimum: -9223372036854776000
          maximum: 9223372036854776000
          description: |-
            This feature is in Beta.

            If specified, our system will make a best effort to sample deterministically, such that
            repeated requests with the same `seed` and parameters should return the same result.

            Determinism is not guaranteed, and you should refer to the `system_fingerprint` response
            parameter to monitor changes in the backend.
          x-oaiMeta:
            beta: true
        stop:
          oneOf:
            - $ref: '#/components/schemas/Stop'
          nullable: true
          description: Up to 4 sequences where the API will stop generating further tokens.
          default: null
        stream:
          type: boolean
          nullable: true
          description: |-
            If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only
            [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
            as they become available, with the stream terminated by a `data: [DONE]` message.
            [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
          default: false
        temperature:
          type: number
          format: double
          nullable: true
          minimum: 0
          maximum: 2
          description: |-
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
            more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
          default: 1
        top_p:
          type: number
          format: double
          nullable: true
          minimum: 0
          maximum: 1
          description: |-
            An alternative to sampling with temperature, called nucleus sampling, where the model considers
            the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising
            the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          default: 1
        tools:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
          description: |-
            A list of tools the model may call. Currently, only functions are supported as a tool. Use this
            to provide a list of functions the model may generate JSON inputs for.
        tool_choice:
          $ref: '#/components/schemas/ChatCompletionToolChoiceOption'
        user:
          allOf:
            - $ref: '#/components/schemas/User'
          description: |-
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect
            abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
        function_call:
          anyOf:
            - type: string
              enum:
                - none
                - auto
                - auto
            - $ref: '#/components/schemas/ChatCompletionFunctionCallOption'
          description: |-
            Deprecated in favor of `tool_choice`.

            Controls which (if any) function is called by the model. `none` means the model will not call a
            function and instead generates a message. `auto` means the model can pick between generating a
            message or calling a function. Specifying a particular function via `{"name": "my_function"}`
            forces the model to call that function.

            `none` is the default when no functions are present. `auto` is the default if functions are
            present.
          deprecated: true
          x-oaiExpandable: true
        functions:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionFunctions'
          minItems: 1
          maxItems: 128
          description: |-
            Deprecated in favor of `tools`.

            A list of functions the model may generate JSON inputs for.
          deprecated: true
    CreateChatCompletionResponse:
      type: object
      required:
        - id
        - choices
        - created
        - model
        - object
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        choices:
          type: array
          items:
            type: object
            properties:
              finish_reason:
                type: string
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
                  - length
                  - content_filter
                description: |-
                  The reason the model stopped generating tokens. This will be `stop` if the model hit a
                  natural stop point or a provided stop sequence, `length` if the maximum number of tokens
                  specified in the request was reached, `content_filter` if content was omitted due to a flag
                  from our content filters, `tool_calls` if the model called a tool, or `function_call`
                  (deprecated) if the model called a function.
              index:
                type: integer
                format: int64
                description: The index of the choice in the list of choices.
              message:
                $ref: '#/components/schemas/ChatCompletionResponseMessage'
              logprobs:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                required:
                  - content
                nullable: true
                description: Log probability information for the choice.
            required:
              - finish_reason
              - index
              - message
              - logprobs
          description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
        created:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) of when the chat completion was created.
        model:
          type: string
          description: The model used for the chat completion.
        system_fingerprint:
          type: string
          description: |-
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes
            have been made that might impact determinism.
        object:
          type: string
          enum:
            - chat.completion
          description: The object type, which is always `chat.completion`.
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      description: Represents a chat completion response returned by model, based on the provided input.
    CreateCompletionRequest:
      type: object
      required:
        - model
        - prompt
      properties:
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - gpt-3.5-turbo-instruct
                - davinci-002
                - babbage-002
          description: |-
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to
            see all of your available models, or see our [Model overview](/docs/models/overview) for
            descriptions of them.
          x-oaiTypeLabel: string
        prompt:
          oneOf:
            - $ref: '#/components/schemas/Prompt'
          nullable: true
          description: |-
            The prompt(s) to generate completions for, encoded as a string, array of strings, array of
            tokens, or array of token arrays.

            Note that <|endoftext|> is the document separator that the model sees during training, so if a
            prompt is not specified the model will generate as if from the beginning of a new document.
          default: <|endoftext|>
        best_of:
          type: integer
          format: int64
          nullable: true
          minimum: 0
          maximum: 20
          description: |-
            Generates `best_of` completions server-side and returns the "best" (the one with the highest
            log probability per token). Results cannot be streamed.

            When used with `n`, `best_of` controls the number of candidate completions and `n` specifies
            how many to return – `best_of` must be greater than `n`.

            **Note:** Because this parameter generates many completions, it can quickly consume your token
            quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
          default: 1
        echo:
          type: boolean
          nullable: true
          description: Echo back the prompt in addition to the completion
          default: false
        frequency_penalty:
          type: number
          format: double
          nullable: true
          minimum: -2
          maximum: 2
          description: |-
            Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing
            frequency in the text so far, decreasing the model's likelihood to repeat the same line
            verbatim.

            [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
          default: 0
        logit_bias:
          type: object
          additionalProperties:
            type: integer
            format: int64
          nullable: true
          description: |-
            Modify the likelihood of specified tokens appearing in the completion.

            Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an
            associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe)
            to convert text to token IDs. Mathematically, the bias is added to the logits generated by the
            model prior to sampling. The exact effect will vary per model, but values between -1 and 1
            should decrease or increase likelihood of selection; values like -100 or 100 should result in a
            ban or exclusive selection of the relevant token.

            As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being
            generated.
          x-oaiTypeLabel: map
          default: null
        logprobs:
          type: integer
          format: int64
          nullable: true
          minimum: 0
          maximum: 5
          description: |-
            Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens.
            For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The
            API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1`
            elements in the response.

            The maximum value for `logprobs` is 5.
          default: null
        max_tokens:
          type: integer
          format: int64
          nullable: true
          minimum: 0
          description: |-
            The maximum number of [tokens](/tokenizer) to generate in the completion.

            The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
            [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)
            for counting tokens.
          default: 16
        n:
          type: integer
          format: int64
          nullable: true
          minimum: 1
          maximum: 128
          description: |-
            How many completions to generate for each prompt.

            **Note:** Because this parameter generates many completions, it can quickly consume your token
            quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
          default: 1
        presence_penalty:
          type: number
          format: double
          nullable: true
          minimum: -2
          maximum: 2
          description: |-
            Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear
            in the text so far, increasing the model's likelihood to talk about new topics.

            [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
          default: 0
        seed:
          type: integer
          format: int64
          nullable: true
          minimum: -9223372036854776000
          maximum: 9223372036854776000
          description: |-
            If specified, our system will make a best effort to sample deterministically, such that
            repeated requests with the same `seed` and parameters should return the same result.

            Determinism is not guaranteed, and you should refer to the `system_fingerprint` response
            parameter to monitor changes in the backend.
          x-oaiMeta:
            beta: true
        stop:
          oneOf:
            - $ref: '#/components/schemas/Stop'
          nullable: true
          description: Up to 4 sequences where the API will stop generating further tokens.
          default: null
        stream:
          type: boolean
          nullable: true
          description: |-
            If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only
            [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
            as they become available, with the stream terminated by a `data: [DONE]` message.
            [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
          default: false
        suffix:
          type: string
          nullable: true
          description: The suffix that comes after a completion of inserted text.
          default: null
        temperature:
          type: number
          format: double
          nullable: true
          minimum: 0
          maximum: 2
          description: |-
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
            more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
          default: 1
        top_p:
          type: number
          format: double
          nullable: true
          minimum: 0
          maximum: 1
          description: |-
            An alternative to sampling with temperature, called nucleus sampling, where the model considers
            the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising
            the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          default: 1
        user:
          allOf:
            - $ref: '#/components/schemas/User'
          description: |-
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect
            abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    CreateCompletionResponse:
      type: object
      required:
        - id
        - choices
        - created
        - model
        - object
      properties:
        id:
          type: string
          description: A unique identifier for the completion.
        choices:
          type: array
          items:
            type: object
            properties:
              index:
                type: integer
                format: int64
              text:
                type: string
              logprobs:
                type: object
                properties:
                  tokens:
                    type: array
                    items:
                      type: string
                  token_logprobs:
                    type: array
                    items:
                      type: number
                      format: double
                  top_logprobs:
                    type: array
                    items:
                      type: object
                      additionalProperties:
                        type: integer
                        format: int64
                  text_offset:
                    type: array
                    items:
                      type: integer
                      format: int64
                required:
                  - tokens
                  - token_logprobs
                  - top_logprobs
                  - text_offset
                nullable: true
              finish_reason:
                type: string
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
                  - length
                  - content_filter
                description: |-
                  The reason the model stopped generating tokens. This will be `stop` if the model hit a
                  natural stop point or a provided stop sequence, or `content_filter` if content was omitted
                  due to a flag from our content filters, `length` if the maximum number of tokens specified
                  in the request was reached, or `content_filter` if content was omitted due to a flag from our
                  content filters.
            required:
              - index
              - text
              - logprobs
              - finish_reason
          description: The list of completion choices the model generated for the input.
        created:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) of when the completion was created.
        model:
          type: string
          description: The model used for the completion.
        system_fingerprint:
          type: string
          description: |-
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes
            have been made that might impact determinism.
        object:
          type: string
          enum:
            - text_completion
          description: The object type, which is always `text_completion`.
        usage:
          allOf:
            - $ref: '#/components/schemas/CompletionUsage'
          description: Usage statistics for the completion request.
      description: |-
        Represents a completion response from the API. Note: both the streamed and non-streamed response
        objects share the same shape (unlike the chat endpoint).
    CreateEmbeddingRequest:
      type: object
      required:
        - input
        - model
      properties:
        input:
          allOf:
            - $ref: '#/components/schemas/CreateEmbeddingRequestInput'
          description: |-
            Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a
            single request, pass an array of strings or array of token arrays. Each input must not exceed
            the max input tokens for the model (8191 tokens for `text-embedding-ada-002`) and cannot be an
            empty string.
            [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)
            for counting tokens.
          x-oaiExpandable: true
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - text-embedding-ada-002
                - text-embedding-3-small
                - text-embedding-3-large
          description: |-
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to
            see all of your available models, or see our [Model overview](/docs/models/overview) for
            descriptions of them.
          x-oaiTypeLabel: string
        encoding_format:
          type: string
          enum:
            - float
            - base64
          description: |-
            The format to return the embeddings in. Can be either `float` or
            [`base64`](https://pypi.org/project/pybase64/).
          default: float
        dimensions:
          type: integer
          format: int64
          minimum: 1
          description: |-
            The number of dimensions the resulting output embeddings should have. Only supported in
            `text-embedding-3` and later models.
        user:
          allOf:
            - $ref: '#/components/schemas/User'
          description: |-
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect
            abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    CreateEmbeddingRequestInput:
      oneOf:
        - type: string
        - type: array
          items:
            type: string
        - $ref: '#/components/schemas/TokenArrayItem'
        - $ref: '#/components/schemas/TokenArrayArray'
    CreateEmbeddingResponse:
      type: object
      required:
        - data
        - model
        - object
        - usage
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Embedding'
          description: The list of embeddings generated by the model.
        model:
          type: string
          description: The name of the model used to generate the embedding.
        object:
          type: string
          enum:
            - list
          description: The object type, which is always "list".
        usage:
          type: object
          properties:
            prompt_tokens:
              type: integer
              format: int64
              description: The number of tokens used by the prompt.
            total_tokens:
              type: integer
              format: int64
              description: The total number of tokens used by the request.
          required:
            - prompt_tokens
            - total_tokens
          description: The usage information for the request.
    CreateFileRequestMultiPart:
      type: object
      required:
        - file
        - purpose
      properties:
        file:
          type: string
          format: binary
          description: The file object (not file name) to be uploaded.
        purpose:
          type: string
          enum:
            - fine-tune
            - assistants
          description: |-
            The intended purpose of the uploaded file. Use "fine-tune" for 
            [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for 
            [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This
            allows us to validate the format of the uploaded file is correct for fine-tuning.
    CreateFineTuneRequest:
      type: object
      required:
        - training_file
      properties:
        training_file:
          type: string
          description: |-
            The ID of an uploaded file that contains training data.

            See [upload file](/docs/api-reference/files/upload) for how to upload a file.

            Your dataset must be formatted as a JSONL file, where each training example is a JSON object
            with the keys "prompt" and "completion". Additionally, you must upload your file with the
            purpose `fine-tune`.

            See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more
            details.
        validation_file:
          type: string
          nullable: true
          description: |-
            The ID of an uploaded file that contains validation data.

            If you provide this file, the data is used to generate validation metrics periodically during
            fine-tuning. These metrics can be viewed in the
            [fine-tuning results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).
            Your train and validation data should be mutually exclusive.

            Your dataset must be formatted as a JSONL file, where each validation example is a JSON object
            with the keys "prompt" and "completion". Additionally, you must upload your file with the
            purpose `fine-tune`.

            See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more
            details.
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - ada
                - babbage
                - curie
                - davinci
          nullable: true
          description: |-
            The name of the base model to fine-tune. You can select one of "ada", "babbage", "curie",
            "davinci", or a fine-tuned model created after 2022-04-21 and before 2023-08-22. To learn more
            about these models, see the [Models](/docs/models) documentation.
          x-oaiTypeLabel: string
        n_epochs:
          type: integer
          format: int64
          nullable: true
          description: |-
            The number of epochs to train the model for. An epoch refers to one full cycle through the
            training dataset.
          default: 4
        batch_size:
          type: integer
          format: int64
          nullable: true
          description: |-
            The batch size to use for training. The batch size is the number of training examples used to
            train a single forward and backward pass.

            By default, the batch size will be dynamically configured to be ~0.2% of the number of examples
            in the training set, capped at 256 - in general, we've found that larger batch sizes tend to
            work better for larger datasets.
          default: null
        learning_rate_multiplier:
          type: number
          format: double
          nullable: true
          description: |-
            The learning rate multiplier to use for training. The fine-tuning learning rate is the original
            learning rate used for pretraining multiplied by this value.

            By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final
            `batch_size` (larger learning rates tend to perform better with larger batch sizes). We
            recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best
            results.
          default: null
        prompt_loss_rate:
          type: number
          format: double
          nullable: true
          description: |-
            The weight to use for loss on the prompt tokens. This controls how much the model tries to
            learn to generate the prompt (as compared to the completion which always has a weight of 1.0),
            and can add a stabilizing effect to training when completions are short.

            If prompts are extremely long (relative to completions), it may make sense to reduce this
            weight so as to avoid over-prioritizing learning the prompt.
          default: 0.01
        compute_classification_metrics:
          type: boolean
          nullable: true
          description: |-
            If set, we calculate classification-specific metrics such as accuracy and F-1 score using the
            validation set at the end of every epoch. These metrics can be viewed in the
            [results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).

            In order to compute classification metrics, you must provide a `validation_file`. Additionally,
            you must specify `classification_n_classes` for multiclass classification or
            `classification_positive_class` for binary classification.
          default: false
        classification_n_classes:
          type: integer
          format: int64
          nullable: true
          description: |-
            The number of classes in a classification task.

            This parameter is required for multiclass classification.
          default: null
        classification_positive_class:
          type: string
          nullable: true
          description: |-
            The positive class in binary classification.

            This parameter is needed to generate precision, recall, and F1 metrics when doing binary
            classification.
          default: null
        classification_betas:
          type: array
          items:
            type: number
            format: double
          nullable: true
          description: |-
            If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score
            is a generalization of F-1 score. This is only used for binary classification.

            With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger
            beta score puts more weight on recall and less on precision. A smaller beta score puts more
            weight on precision and less on recall.
          default: null
        suffix:
          oneOf:
            - $ref: '#/components/schemas/SuffixString'
          nullable: true
          description: |-
            A string of up to 18 characters that will be added to your fine-tuned model name.

            For example, a `suffix` of "custom-model-name" would produce a model name like
            `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
          default: null
    CreateFineTuningJobRequest:
      type: object
      required:
        - training_file
        - model
      properties:
        training_file:
          type: string
          description: |-
            The ID of an uploaded file that contains training data.

            See [upload file](/docs/api-reference/files/upload) for how to upload a file.

            Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with
            the purpose `fine-tune`.

            See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
        validation_file:
          type: string
          nullable: true
          description: |-
            The ID of an uploaded file that contains validation data.

            If you provide this file, the data is used to generate validation metrics periodically during
            fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should
            not be present in both train and validation files.

            Your dataset must be formatted as a JSONL file. You must upload your file with the purpose
            `fine-tune`.

            See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - babbage-002
                - davinci-002
                - gpt-3.5-turbo
          description: |-
            The name of the model to fine-tune. You can select one of the
            [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
          x-oaiTypeLabel: string
        hyperparameters:
          type: object
          properties:
            n_epochs:
              anyOf:
                - type: string
                  enum:
                    - auto
                    - low
                    - high
                - $ref: '#/components/schemas/NEpochs'
              description: |-
                The number of epochs to train the model for. An epoch refers to one full cycle through the
                training dataset.
              default: auto
          description: The hyperparameters used for the fine-tuning job.
        suffix:
          oneOf:
            - $ref: '#/components/schemas/SuffixString'
          nullable: true
          description: |-
            A string of up to 18 characters that will be added to your fine-tuned model name.

            For example, a `suffix` of "custom-model-name" would produce a model name like
            `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.
          default: null
    CreateImageEditRequestMultiPart:
      type: object
      required:
        - image
        - prompt
      properties:
        image:
          type: string
          format: binary
          description: |-
            The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not
            provided, image must have transparency, which will be used as the mask.
        prompt:
          type: string
          maxLength: 1000
          description: A text description of the desired image(s). The maximum length is 1000 characters.
        mask:
          type: string
          format: binary
          description: |-
            An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where
            `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions
            as `image`.
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - dall-e-2
          description: The model to use for image generation. Only `dall-e-2` is supported at this time.
          x-oaiTypeLabel: string
          default: dall-e-2
        n:
          oneOf:
            - $ref: '#/components/schemas/ImagesN'
          nullable: true
          description: The number of images to generate. Must be between 1 and 10.
          default: 1
        size:
          type: string
          enum:
            - 256x256
            - 512x512
            - 1024x1024
            - 512x512
            - 1024x1024
          nullable: true
          description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
          default: 1024x1024
        response_format:
          type: string
          enum:
            - url
            - b64_json
            - b64_json
          nullable: true
          description: The format in which the generated images are returned. Must be one of `url` or `b64_json`.
          default: url
        user:
          allOf:
            - $ref: '#/components/schemas/User'
          description: |-
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect
            abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    CreateImageRequest:
      type: object
      required:
        - prompt
      properties:
        prompt:
          type: string
          description: |-
            A text description of the desired image(s). The maximum length is 1000 characters for
            `dall-e-2` and 4000 characters for `dall-e-3`.
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - dall-e-2
                - dall-e-3
          description: The model to use for image generation.
          x-oaiTypeLabel: string
          default: dall-e-2
        n:
          oneOf:
            - $ref: '#/components/schemas/ImagesN'
          nullable: true
          description: |-
            The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is
            supported.
          default: 1
        quality:
          type: string
          enum:
            - standard
            - hd
          nullable: true
          description: |-
            The quality of the image that will be generated. `hd` creates images with finer details and
            greater consistency across the image. This param is only supported for `dall-e-3`.
          default: standard
        response_format:
          type: string
          enum:
            - url
            - b64_json
          nullable: true
          description: The format in which the generated images are returned. Must be one of `url` or `b64_json`.
          default: url
        size:
          type: string
          enum:
            - 256x256
            - 512x512
            - 1024x1024
            - 1792x1024
            - 1024x1792
          nullable: true
          description: |-
            The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for
            `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
          default: 1024x1024
        style:
          type: string
          enum:
            - vivid
            - natural
          nullable: true
          description: |-
            The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model
            to lean towards generating hyper-real and dramatic images. Natural causes the model to produce
            more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
          default: vivid
        user:
          allOf:
            - $ref: '#/components/schemas/User'
          description: |-
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect
            abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    CreateImageVariationRequestMultiPart:
      type: object
      required:
        - image
      properties:
        image:
          type: string
          format: binary
          description: |-
            The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB,
            and square.
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - dall-e-2
          description: The model to use for image generation. Only `dall-e-2` is supported at this time.
          x-oaiTypeLabel: string
          default: dall-e-2
        n:
          oneOf:
            - $ref: '#/components/schemas/ImagesN'
          nullable: true
          description: The number of images to generate. Must be between 1 and 10.
          default: 1
        response_format:
          type: string
          enum:
            - url
            - b64_json
            - b64_json
          nullable: true
          description: The format in which the generated images are returned. Must be one of `url` or `b64_json`.
          default: url
        size:
          type: string
          enum:
            - 256x256
            - 512x512
            - 1024x1024
            - 512x512
            - 1024x1024
          nullable: true
          description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
          default: 1024x1024
        user:
          allOf:
            - $ref: '#/components/schemas/User'
          description: |-
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect
            abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    CreateMessageRequest:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum:
            - user
            - assistant
          description: The role of the entity that is creating the message. Currently only `user` is supported.
        content:
          type: string
          minLength: 1
          maxLength: 32768
          description: The content of the message.
        file_ids:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 10
          description: |-
            A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a
            maximum of 10 files attached to a message. Useful for tools like `retrieval` and
            `code_interpreter` that can access and use files.
          default: []
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    CreateModerationRequest:
      type: object
      required:
        - input
      properties:
        input:
          allOf:
            - $ref: '#/components/schemas/CreateModerationRequestInput'
          description: The input text to classify
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - text-moderation-latest
                - text-moderation-stable
          description: |-
            Two content moderations models are available: `text-moderation-stable` and
            `text-moderation-latest`. The default is `text-moderation-latest` which will be automatically
            upgraded over time. This ensures you are always using our most accurate model. If you use
            `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy
            of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
          x-oaiTypeLabel: string
          default: text-moderation-latest
    CreateModerationRequestInput:
      oneOf:
        - type: string
        - type: array
          items:
            type: string
    CreateModerationResponse:
      type: object
      required:
        - id
        - model
        - results
      properties:
        id:
          type: string
          description: The unique identifier for the moderation request.
        model:
          type: string
          description: The model used to generate the moderation results.
        results:
          type: array
          items:
            type: object
            properties:
              flagged:
                type: boolean
                description: Whether the content violates [OpenAI's usage policies](/policies/usage-policies).
              categories:
                type: object
                properties:
                  hate:
                    type: boolean
                    description: |-
                      Content that expresses, incites, or promotes hate based on race, gender, ethnicity,
                      religion, nationality, sexual orientation, disability status, or caste. Hateful content
                      aimed at non-protected groups (e.g., chess players) is harrassment.
                  hate/threatening:
                    type: boolean
                    description: |-
                      Hateful content that also includes violence or serious harm towards the targeted group
                      based on race, gender, ethnicity, religion, nationality, sexual orientation, disability
                      status, or caste.
                  harassment:
                    type: boolean
                    description: Content that expresses, incites, or promotes harassing language towards any target.
                  harassment/threatening:
                    type: boolean
                    description: Harassment content that also includes violence or serious harm towards any target.
                  self-harm:
                    type: boolean
                    description: |-
                      Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting,
                      and eating disorders.
                  self-harm/intent:
                    type: boolean
                    description: |-
                      Content where the speaker expresses that they are engaging or intend to engage in acts of
                      self-harm, such as suicide, cutting, and eating disorders.
                  self-harm/instructions:
                    type: boolean
                    description: |-
                      Content that encourages performing acts of self-harm, such as suicide, cutting, and eating
                      disorders, or that gives instructions or advice on how to commit such acts.
                  sexual:
                    type: boolean
                    description: |-
                      Content meant to arouse sexual excitement, such as the description of sexual activity, or
                      that promotes sexual services (excluding sex education and wellness).
                  sexual/minors:
                    type: boolean
                    description: Sexual content that includes an individual who is under 18 years old.
                  violence:
                    type: boolean
                    description: Content that depicts death, violence, or physical injury.
                  violence/graphic:
                    type: boolean
                    description: Content that depicts death, violence, or physical injury in graphic detail.
                required:
                  - hate
                  - hate/threatening
                  - harassment
                  - harassment/threatening
                  - self-harm
                  - self-harm/intent
                  - self-harm/instructions
                  - sexual
                  - sexual/minors
                  - violence
                  - violence/graphic
                description: A list of the categories, and whether they are flagged or not.
              category_scores:
                type: object
                properties:
                  hate:
                    type: number
                    format: double
                    description: The score for the category 'hate'.
                  hate/threatening:
                    type: number
                    format: double
                    description: The score for the category 'hate/threatening'.
                  harassment:
                    type: number
                    format: double
                    description: The score for the category 'harassment'.
                  harassment/threatening:
                    type: number
                    format: double
                    description: The score for the category 'harassment/threatening'.
                  self-harm:
                    type: number
                    format: double
                    description: The score for the category 'self-harm'.
                  self-harm/intent:
                    type: number
                    format: double
                    description: The score for the category 'self-harm/intent'.
                  self-harm/instructions:
                    type: number
                    format: double
                    description: The score for the category 'self-harm/instructive'.
                  sexual:
                    type: number
                    format: double
                    description: The score for the category 'sexual'.
                  sexual/minors:
                    type: number
                    format: double
                    description: The score for the category 'sexual/minors'.
                  violence:
                    type: number
                    format: double
                    description: The score for the category 'violence'.
                  violence/graphic:
                    type: number
                    format: double
                    description: The score for the category 'violence/graphic'.
                required:
                  - hate
                  - hate/threatening
                  - harassment
                  - harassment/threatening
                  - self-harm
                  - self-harm/intent
                  - self-harm/instructions
                  - sexual
                  - sexual/minors
                  - violence
                  - violence/graphic
                description: A list of the categories along with their scores as predicted by model.
            required:
              - flagged
              - categories
              - category_scores
          description: A list of moderation objects.
      description: Represents policy compliance report by OpenAI's content moderation model against a given input.
    CreateRunRequest:
      type: object
      required:
        - assistant_id
      properties:
        assistant_id:
          type: string
          description: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
        model:
          type: string
          nullable: true
          description: |-
            The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value
            is provided here, it will override the model associated with the assistant. If not, the model
            associated with the assistant will be used.
        instructions:
          type: string
          nullable: true
          description: |-
            Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant.
            This is useful for modifying the behavior on a per-run basis.
        additional_instructions:
          type: string
          nullable: true
          description: |-
            Appends additional instructions at the end of the instructions for the run. This is useful for
            modifying the behavior on a per-run basis without overriding other instructions.
        tools:
          type: object
          allOf:
            - $ref: '#/components/schemas/CreateRunRequestToolsItem'
          nullable: true
          description: |-
            Override the tools the assistant can use for this run. This is useful for modifying the
            behavior on a per-run basis.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    CreateRunRequestTool:
      oneOf:
        - $ref: '#/components/schemas/AssistantToolsCode'
        - $ref: '#/components/schemas/AssistantToolsRetrieval'
        - $ref: '#/components/schemas/AssistantToolsFunction'
      x-oaiExpandable: true
    CreateRunRequestToolsItem:
      type: array
      items:
        $ref: '#/components/schemas/CreateRunRequestTool'
      maxItems: 20
    CreateSpeechRequest:
      type: object
      required:
        - model
        - input
        - voice
      properties:
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - tts-1
                - tts-1-hd
          description: 'One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`'
          x-oaiTypeLabel: string
        input:
          type: string
          maxLength: 4096
          description: The text to generate audio for. The maximum length is 4096 characters.
        voice:
          type: string
          enum:
            - alloy
            - echo
            - fable
            - onyx
            - nova
            - shimmer
          description: |-
            The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`,
            `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the
            [Text to speech guide](/docs/guides/text-to-speech/voice-options).
        response_format:
          type: string
          enum:
            - mp3
            - opus
            - aac
            - flac
          description: The format to audio in. Supported formats are `mp3`, `opus`, `aac`, and `flac`.
          default: mp3
        speed:
          type: number
          format: double
          minimum: 0.25
          maximum: 4
          description: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
          default: 1
    CreateThreadAndRunRequest:
      type: object
      required:
        - assistant_id
      properties:
        assistant_id:
          type: string
          description: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
        thread:
          allOf:
            - $ref: '#/components/schemas/CreateThreadRequest'
          description: If no thread is provided, an empty thread will be created.
        model:
          type: string
          nullable: true
          description: |-
            The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is
            provided here, it will override the model associated with the assistant. If not, the model
            associated with the assistant will be used.
        instructions:
          type: string
          nullable: true
          description: |-
            Override the default system message of the assistant. This is useful for modifying the behavior
            on a per-run basis.
        tools:
          type: object
          allOf:
            - $ref: '#/components/schemas/CreateRunRequestToolsItem'
          nullable: true
          description: |-
            Override the tools the assistant can use for this run. This is useful for modifying the
            behavior on a per-run basis.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    CreateThreadRequest:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/CreateMessageRequest'
          description: A list of [messages](/docs/api-reference/messages) to start the thread with.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
    CreateTranscriptionRequestMultiPart:
      type: object
      required:
        - file
        - model
      properties:
        file:
          type: string
          format: binary
          description: |-
            The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4,
            mpeg, mpga, m4a, ogg, wav, or webm.
          x-oaiTypeLabel: file
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - whisper-1
          description: ID of the model to use. Only `whisper-1` is currently available.
          x-oaiTypeLabel: string
        language:
          type: string
          description: |-
            The language of the input audio. Supplying the input language in
            [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy
            and latency.
        prompt:
          type: string
          description: |-
            An optional text to guide the model's style or continue a previous audio segment. The
            [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
        response_format:
          type: string
          enum:
            - json
            - text
            - srt
            - verbose_json
            - vtt
            - text
            - srt
            - verbose_json
            - vtt
          description: |-
            The format of the transcript output, in one of these options: json, text, srt, verbose_json, or
            vtt.
          default: json
        temperature:
          type: number
          format: double
          minimum: 0
          maximum: 1
          description: |-
            The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more
            random, while lower values like 0.2 will make it more focused and deterministic. If set to 0,
            the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to
            automatically increase the temperature until certain thresholds are hit.
          default: 0
    CreateTranscriptionResponse:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: The transcribed text for the provided audio data.
        task:
          type: string
          enum:
            - transcribe
          description: The label that describes which operation type generated the accompanying response data.
        language:
          type: string
          description: The spoken language that was detected in the audio data.
        duration:
          type: number
          format: double
          description: The total duration of the audio processed to produce accompanying transcription information.
        segments:
          type: array
          items:
            $ref: '#/components/schemas/AudioSegment'
          description: |-
            A collection of information about the timing, probabilities, and other detail of each processed
            audio segment.
    CreateTranslationRequestMultiPart:
      type: object
      required:
        - file
        - model
      properties:
        file:
          type: string
          format: binary
          description: |-
            The audio file object (not file name) to translate, in one of these formats: flac, mp3, mp4,
            mpeg, mpga, m4a, ogg, wav, or webm.
          x-oaiTypeLabel: file
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - whisper-1
          description: ID of the model to use. Only `whisper-1` is currently available.
          x-oaiTypeLabel: string
        prompt:
          type: string
          description: |-
            An optional text to guide the model's style or continue a previous audio segment. The
            [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
        response_format:
          type: string
          enum:
            - json
            - text
            - srt
            - verbose_json
            - vtt
            - text
            - srt
            - verbose_json
            - vtt
          description: |-
            The format of the transcript output, in one of these options: json, text, srt, verbose_json, or
            vtt.
          default: json
        temperature:
          type: number
          format: double
          minimum: 0
          maximum: 1
          description: |-
            The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more
            random, while lower values like 0.2 will make it more focused and deterministic. If set to 0,
            the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to
            automatically increase the temperature until certain thresholds are hit.
          default: 0
    CreateTranslationResponse:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: The translated text for the provided audio data.
        task:
          type: string
          enum:
            - translate
          description: The label that describes which operation type generated the accompanying response data.
        language:
          type: string
          description: The spoken language that was detected in the audio data.
        duration:
          type: number
          format: double
          description: The total duration of the audio processed to produce accompanying translation information.
        segments:
          type: array
          items:
            $ref: '#/components/schemas/AudioSegment'
          description: |-
            A collection of information about the timing, probabilities, and other detail of each processed
            audio segment.
    DeleteAssistantFileResponse:
      type: object
      required:
        - id
        - deleted
        - object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - assistant.file.deleted
      description: |-
        Deletes the association between the assistant and the file, but does not delete the
        [File](/docs/api-reference/files) object itself.
    DeleteAssistantResponse:
      type: object
      required:
        - id
        - deleted
        - object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - assistant.deleted
    DeleteFileResponse:
      type: object
      required:
        - id
        - object
        - deleted
      properties:
        id:
          type: string
        object:
          type: string
          enum:
            - file
        deleted:
          type: boolean
    DeleteModelResponse:
      type: object
      required:
        - id
        - deleted
        - object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - model
    DeleteThreadResponse:
      type: object
      required:
        - id
        - deleted
        - object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - thread.deleted
    Embedding:
      type: object
      required:
        - index
        - embedding
        - object
      properties:
        index:
          type: integer
          format: int64
          description: The index of the embedding in the list of embeddings.
        embedding:
          anyOf:
            - type: array
              items:
                type: number
                format: double
            - type: string
          description: |-
            The embedding vector, which is a list of floats. The length of vector depends on the model as
            listed in the [embedding guide](/docs/guides/embeddings).
        object:
          type: string
          enum:
            - embedding
          description: The object type, which is always "embedding".
      description: Represents an embedding vector returned by embedding endpoint.
    Error:
      type: object
      required:
        - type
        - message
        - param
        - code
      properties:
        type:
          type: string
        message:
          type: string
        param:
          type: string
          nullable: true
        code:
          type: string
          nullable: true
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'
    FineTune:
      type: object
      required:
        - id
        - object
        - created_at
        - updated_at
        - model
        - fine_tuned_model
        - organization_id
        - status
        - hyperparams
        - training_files
        - validation_files
        - result_files
      properties:
        id:
          type: string
          description: The object identifier, which can be referenced in the API endpoints.
        object:
          type: string
          enum:
            - fine-tune
            - fine-tune-results
            - assistants
            - assistants_output
          description: The object type, which is always "fine-tune".
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the fine-tuning job was created.
        updated_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the fine-tuning job was last updated.
        model:
          type: string
          description: The base model that is being fine-tuned.
        fine_tuned_model:
          type: string
          nullable: true
          description: The name of the fine-tuned model that is being created.
        organization_id:
          type: string
          description: The organization that owns the fine-tuning job.
        status:
          type: string
          enum:
            - created
            - pending
            - running
            - succeeded
            - failed
            - cancelled
            - running
            - succeeded
            - failed
            - cancelled
          description: |-
            The current status of the fine-tuning job, which can be either `created`, `running`,
            `succeeded`, `failed`, or `cancelled`.
        hyperparams:
          type: object
          properties:
            n_epochs:
              type: integer
              format: int64
              description: |-
                The number of epochs to train the model for. An epoch refers to one full cycle through the
                training dataset.
            batch_size:
              type: integer
              format: int64
              description: |-
                The batch size to use for training. The batch size is the number of training examples used to
                train a single forward and backward pass.
            prompt_loss_weight:
              type: number
              format: double
              description: The weight to use for loss on the prompt tokens.
            learning_rate_multiplier:
              type: number
              format: double
              description: The learning rate multiplier to use for training.
            compute_classification_metrics:
              type: boolean
              description: The classification metrics to compute using the validation dataset at the end of every epoch.
            classification_positive_class:
              type: string
              description: The positive class to use for computing classification metrics.
            classification_n_classes:
              type: integer
              format: int64
              description: The number of classes to use for computing classification metrics.
          required:
            - n_epochs
            - batch_size
            - prompt_loss_weight
            - learning_rate_multiplier
          description: |-
            The hyperparameters used for the fine-tuning job. See the
            [fine-tuning guide](/docs/guides/legacy-fine-tuning/hyperparameters) for more details.
        training_files:
          type: array
          items:
            $ref: '#/components/schemas/OpenAIFile'
          description: The list of files used for training.
        validation_files:
          type: array
          items:
            $ref: '#/components/schemas/OpenAIFile'
          description: The list of files used for validation.
        result_files:
          type: array
          items:
            $ref: '#/components/schemas/OpenAIFile'
          description: The compiled results files for the fine-tuning job.
        events:
          type: array
          items:
            $ref: '#/components/schemas/FineTuneEvent'
          description: The list of events that have been observed in the lifecycle of the FineTune job.
      description: The `FineTune` object represents a legacy fine-tune job that has been created through the API.
      deprecated: true
    FineTuneEvent:
      type: object
      required:
        - object
        - created_at
        - level
        - message
      properties:
        object:
          type: string
        created_at:
          type: integer
          format: unixtime
        level:
          type: string
        message:
          type: string
    FineTuningEvent:
      type: object
      required:
        - object
        - created_at
        - level
        - message
      properties:
        object:
          type: string
        created_at:
          type: integer
          format: unixtime
        level:
          type: string
        message:
          type: string
        data:
          type: object
          additionalProperties: {}
          nullable: true
        type:
          type: string
          enum:
            - message
            - metrics
    FineTuningJob:
      type: object
      required:
        - id
        - object
        - created_at
        - finished_at
        - model
        - fine_tuned_model
        - organization_id
        - status
        - hyperparameters
        - training_file
        - validation_file
        - result_files
        - trained_tokens
        - error
      properties:
        id:
          type: string
          description: The object identifier, which can be referenced in the API endpoints.
        object:
          type: string
          enum:
            - fine_tuning.job
          description: The object type, which is always "fine_tuning.job".
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the fine-tuning job was created.
        finished_at:
          type: string
          format: date-time
          nullable: true
          description: |-
            The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be
            null if the fine-tuning job is still running.
        model:
          type: string
          description: The base model that is being fine-tuned.
        fine_tuned_model:
          type: string
          nullable: true
          description: |-
            The name of the fine-tuned model that is being created. The value will be null if the
            fine-tuning job is still running.
        organization_id:
          type: string
          description: The organization that owns the fine-tuning job.
        status:
          type: string
          enum:
            - created
            - pending
            - running
            - succeeded
            - failed
            - cancelled
            - running
            - succeeded
            - failed
            - cancelled
          description: |-
            The current status of the fine-tuning job, which can be either `created`, `pending`, `running`,
            `succeeded`, `failed`, or `cancelled`.
        hyperparameters:
          type: object
          properties:
            n_epochs:
              anyOf:
                - type: string
                  enum:
                    - auto
                    - low
                    - high
                - $ref: '#/components/schemas/NEpochs'
              description: |-
                The number of epochs to train the model for. An epoch refers to one full cycle through the
                training dataset.

                "Auto" decides the optimal number of epochs based on the size of the dataset. If setting the
                number manually, we support any number between 1 and 50 epochs.
              default: auto
          description: |-
            The hyperparameters used for the fine-tuning job. See the
            [fine-tuning guide](/docs/guides/fine-tuning) for more details.
        training_file:
          type: string
          description: |-
            The file ID used for training. You can retrieve the training data with the
            [Files API](/docs/api-reference/files/retrieve-contents).
        validation_file:
          type: string
          nullable: true
          description: |-
            The file ID used for validation. You can retrieve the validation results with the
            [Files API](/docs/api-reference/files/retrieve-contents).
        result_files:
          type: array
          items:
            type: string
          description: |-
            The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the
            [Files API](/docs/api-reference/files/retrieve-contents).
        trained_tokens:
          type: integer
          format: int64
          nullable: true
          description: |-
            The total number of billable tokens processed by this fine tuning job. The value will be null
            if the fine-tuning job is still running.
        error:
          type: object
          properties:
            message:
              type: string
              description: A human-readable error message.
            code:
              type: string
              description: A machine-readable error code.
            param:
              type: string
              nullable: true
              description: |-
                The parameter that was invalid, usually `training_file` or `validation_file`. This field
                will be null if the failure was not parameter-specific.
          nullable: true
          description: |-
            For fine-tuning jobs that have `failed`, this will contain more information on the cause of the
            failure.
    FineTuningJobEvent:
      type: object
      required:
        - id
        - object
        - created_at
        - level
        - message
      properties:
        id:
          type: string
        object:
          type: string
        created_at:
          type: integer
          format: unixtime
        level:
          type: string
          enum:
            - info
            - warn
            - error
        message:
          type: string
    FunctionObject:
      type: object
      required:
        - name
      properties:
        description:
          type: string
          description: |-
            A description of what the function does, used by the model to choose when and how to call the
            function.
        name:
          type: string
          description: |-
            The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and
            dashes, with a maximum length of 64.
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
    FunctionParameters:
      type: object
      additionalProperties: {}
      description: |-
        The parameters the functions accepts, described as a JSON Schema object. See the
        [guide](/docs/guides/gpt/function-calling) for examples, and the
        [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation
        about the format.\n\nTo describe a function that accepts no parameters, provide the value
        `{\"type\": \"object\", \"properties\": {}}`.
    Image:
      type: object
      properties:
        b64_json:
          type: string
          format: base64
          description: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
        url:
          type: string
          format: uri
          description: The URL of the generated image, if `response_format` is `url` (default).
        revised_prompt:
          type: string
          description: The prompt that was used to generate the image, if there was any revision to the prompt.
      description: Represents the url or the content of an image generated by the OpenAI API.
    ImagesN:
      type: integer
      format: int64
      minimum: 1
      maximum: 10
    ImagesResponse:
      type: object
      required:
        - created
        - data
      properties:
        created:
          type: integer
          format: unixtime
        data:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    ListAssistantFilesResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/AssistantFileObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListAssistantsResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/AssistantObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListFilesResponse:
      type: object
      required:
        - data
        - object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OpenAIFile'
        object:
          type: string
          enum:
            - list
    ListFineTuneEventsResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuneEvent'
    ListFineTunesResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTune'
    ListFineTuningJobEventsResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuningJobEvent'
    ListMessageFilesResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/MessageFileObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListMessagesResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/MessageObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListModelsResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'
    ListPaginatedFineTuningJobsResponse:
      type: object
      required:
        - object
        - data
        - has_more
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuningJob'
        has_more:
          type: boolean
    ListRunStepsResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/RunStepObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListRunsResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/RunObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    MessageContentImageFileObject:
      type: object
      required:
        - type
        - image_file
      properties:
        type:
          type: string
          enum:
            - image_file
          description: Always `image_file`.
        image_file:
          type: object
          properties:
            file_id:
              type: string
              description: The [File](/docs/api-reference/files) ID of the image in the message content.
          required:
            - file_id
      description: References an image [File](/docs/api-reference/files) in the content of a message.
    MessageContentTextAnnotationsFileCitationObject:
      type: object
      required:
        - type
        - text
        - file_citation
        - start_index
        - end_index
      properties:
        type:
          type: string
          enum:
            - file_citation
          description: Always `file_citation`.
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_citation:
          type: object
          properties:
            file_id:
              type: string
              description: The ID of the specific File the citation is from.
            quote:
              type: string
              description: The specific quote in the file.
          required:
            - file_id
            - quote
        start_index:
          type: integer
          format: int64
          minimum: 0
        end_index:
          type: integer
          format: int64
          minimum: 0
      description: |-
        A citation within the message that points to a specific quote from a specific File associated
        with the assistant or the message. Generated when the assistant uses the "retrieval" tool to
        search files.
    MessageContentTextAnnotationsFilePathObject:
      type: object
      required:
        - type
        - text
        - file_path
        - start_index
        - end_index
      properties:
        type:
          type: string
          enum:
            - file_path
          description: Always `file_path`.
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_path:
          type: object
          properties:
            file_id:
              type: string
              description: The ID of the file that was generated.
          required:
            - file_id
        start_index:
          type: integer
          format: int64
          minimum: 0
        end_index:
          type: integer
          format: int64
          minimum: 0
      description: |-
        A URL for the file that's generated when the assistant used the `code_interpreter` tool to
        generate a file.
    MessageContentTextObject:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum:
            - text
            - json_object
          description: Always `text`.
        text:
          type: object
          properties:
            value:
              type: string
              description: The data that makes up the text.
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/MessageContentTextObjectAnnotations'
          required:
            - value
            - annotations
      description: The text content that is part of a message.
    MessageContentTextObjectAnnotations:
      oneOf:
        - $ref: '#/components/schemas/MessageContentTextAnnotationsFileCitationObject'
        - $ref: '#/components/schemas/MessageContentTextAnnotationsFilePathObject'
      x-oaiExpandable: true
    MessageFileObject:
      type: object
      required:
        - id
        - object
        - created_at
        - message_id
      properties:
        id:
          type: string
          description: TThe identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread.message.file
          description: The object type, which is always `thread.message.file`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the message file was created.
        message_id:
          type: string
          description: The ID of the [message](/docs/api-reference/messages) that the [File](/docs/api-reference/files) is attached to.
      description: A list of files attached to a `message`.
    MessageObject:
      type: object
      required:
        - id
        - object
        - created_at
        - thread_id
        - role
        - content
        - assistant_id
        - run_id
        - file_ids
        - metadata
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread.message
          description: The object type, which is always `thread.message`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the message was created.
        thread_id:
          type: string
          description: The [thread](/docs/api-reference/threads) ID that this message belongs to.
        role:
          type: string
          enum:
            - user
            - assistant
          description: The entity that produced the message. One of `user` or `assistant`.
        content:
          type: array
          items:
            $ref: '#/components/schemas/MessageObjectContent'
          description: The content of the message in array of text and/or images.
        assistant_id:
          type: string
          nullable: true
          description: |-
            If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this
            message.
        run_id:
          type: string
          nullable: true
          description: |-
            If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of
            this message.
        file_ids:
          type: array
          items:
            type: string
          maxItems: 10
          description: |-
            A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for
            tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be
            attached to a message.
          default: []
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    MessageObjectContent:
      oneOf:
        - $ref: '#/components/schemas/MessageContentImageFileObject'
        - $ref: '#/components/schemas/MessageContentTextObject'
      x-oaiExpandable: true
    Model:
      type: object
      required:
        - id
        - created
        - object
        - owned_by
      properties:
        id:
          type: string
          description: The model identifier, which can be referenced in the API endpoints.
        created:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) when the model was created.
        object:
          type: string
          enum:
            - model
          description: The object type, which is always "model".
        owned_by:
          type: string
          description: The organization that owns the model.
      description: Describes an OpenAI model offering that can be used with the API.
    ModifyAssistantRequest:
      type: object
      properties:
        model:
          type: string
          description: |-
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to
            see all of your available models, or see our [Model overview](/docs/models/overview) for
            descriptions of them.
        name:
          type: string
          nullable: true
          maxLength: 256
          description: The name of the assistant. The maximum length is 256 characters.
        description:
          type: string
          nullable: true
          maxLength: 512
          description: The description of the assistant. The maximum length is 512 characters.
        instructions:
          type: string
          nullable: true
          maxLength: 32768
          description: The system instructions that the assistant uses. The maximum length is 32768 characters.
        tools:
          allOf:
            - $ref: '#/components/schemas/CreateAssistantRequestToolsItem'
          description: |-
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant.
            Tools can be of types `code_interpreter`, `retrieval`, or `function`.
          default: []
        file_ids:
          type: array
          items:
            type: string
          maxItems: 20
          description: |-
            A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a
            maximum of 20 files attached to the assistant. Files are ordered by their creation date in
            ascending order.
          default: []
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    ModifyMessageRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    ModifyRunRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    ModifyThreadRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
    NEpochs:
      type: integer
      format: int64
      minimum: 1
      maximum: 50
    OpenAIFile:
      type: object
      required:
        - id
        - bytes
        - created_at
        - filename
        - object
        - purpose
        - status
      properties:
        id:
          type: string
          description: The file identifier, which can be referenced in the API endpoints.
        bytes:
          type: integer
          format: int64
          description: The size of the file, in bytes.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the file was created.
        filename:
          type: string
          description: The name of the file.
        object:
          type: string
          enum:
            - file
          description: The object type, which is always "file".
        purpose:
          type: string
          enum:
            - fine-tune
            - fine-tune-results
            - assistants
            - assistants_output
          description: |-
            The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`,
            `assistants`, and `assistants_output`.
        status:
          type: string
          enum:
            - uploaded
            - processed
            - error
          description: |-
            Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or
            `error`.
          deprecated: true
        status_details:
          type: string
          description: |-
            Deprecated. For details on why a fine-tuning training file failed validation, see the `error`
            field on `fine_tuning.job`.
          deprecated: true
      description: The `File` object represents a document that has been uploaded to OpenAI.
    Prompt:
      oneOf:
        - type: string
        - type: array
          items:
            type: string
        - $ref: '#/components/schemas/TokenArrayItem'
        - $ref: '#/components/schemas/TokenArrayArray'
    RunCompletionUsage:
      type: object
      required:
        - completion_tokens
        - prompt_tokens
        - total_tokens
      properties:
        completion_tokens:
          type: integer
          format: int64
          description: Number of completion tokens used over the course of the run.
        prompt_tokens:
          type: integer
          format: int64
          description: Number of prompt tokens used over the course of the run.
        total_tokens:
          type: integer
          format: int64
          description: Total number of tokens used (prompt + completion).
      description: |-
        Usage statistics related to the run. This value will be `null` if the run is not in a terminal
        state (i.e. `in_progress`, `queued`, etc.).
    RunObject:
      type: object
      required:
        - id
        - object
        - created_at
        - thread_id
        - assistant_id
        - status
        - required_action
        - last_error
        - expires_at
        - started_at
        - cancelled_at
        - failed_at
        - completed_at
        - model
        - instructions
        - tools
        - file_ids
        - metadata
        - usage
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread.run
          description: The object type, which is always `thread.run`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the run was created.
        thread_id:
          type: string
          description: |-
            The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this
            run.
        assistant_id:
          type: string
          description: The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
        status:
          type: string
          enum:
            - queued
            - in_progress
            - requires_action
            - cancelling
            - cancelled
            - failed
            - completed
            - expired
          description: |-
            The status of the run, which can be either `queued`, `in_progress`, `requires_action`,
            `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
        required_action:
          type: object
          properties:
            type:
              type: string
              enum:
                - submit_tool_outputs
              description: For now, this is always `submit_tool_outputs`.
            submit_tool_outputs:
              type: object
              properties:
                tool_calls:
                  type: array
                  items:
                    $ref: '#/components/schemas/RunToolCallObject'
                  description: A list of the relevant tool calls.
              required:
                - tool_calls
              description: Details on the tool outputs needed for this run to continue.
          required:
            - type
            - submit_tool_outputs
          nullable: true
          description: |-
            Details on the action required to continue the run. Will be `null` if no action is
            required.
        last_error:
          type: object
          properties:
            code:
              type: string
              enum:
                - server_error
                - rate_limit_exceeded
              description: One of `server_error` or `rate_limit_exceeded`.
            message:
              type: string
              description: A human-readable description of the error.
          required:
            - code
            - message
          nullable: true
          description: The last error associated with this run. Will be `null` if there are no errors.
        expires_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the run will expire.
        started_at:
          type: string
          format: date-time
          nullable: true
          description: The Unix timestamp (in seconds) for when the run was started.
        cancelled_at:
          type: string
          format: date-time
          nullable: true
          description: The Unix timestamp (in seconds) for when the run was cancelled.
        failed_at:
          type: string
          format: date-time
          nullable: true
          description: The Unix timestamp (in seconds) for when the run failed.
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: The Unix timestamp (in seconds) for when the run was completed.
        model:
          type: string
          description: The model that the [assistant](/docs/api-reference/assistants) used for this run.
        instructions:
          type: string
          description: The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
        tools:
          allOf:
            - $ref: '#/components/schemas/CreateRunRequestToolsItem'
          description: The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
        file_ids:
          type: array
          items:
            type: string
          description: |-
            The list of [File](/docs/api-reference/files) IDs the
            [assistant](/docs/api-reference/assistants) used for this run.
          default: []
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
        usage:
          type: object
          allOf:
            - $ref: '#/components/schemas/RunCompletionUsage'
          nullable: true
      description: Represents an execution run on a [thread](/docs/api-reference/threads).
    RunStepCompletionUsage:
      type: object
      required:
        - completion_tokens
        - prompt_tokens
        - total_tokens
      properties:
        completion_tokens:
          type: integer
          format: int64
          description: Number of completion tokens used over the course of the run step.
        prompt_tokens:
          type: integer
          format: int64
          description: Number of prompt tokens used over the course of the run step.
        total_tokens:
          type: integer
          format: int64
          description: Total number of tokens used (prompt + completion).
      description: |-
        Usage statistics related to the run step. This value will be `null` while the run step's status
        is `in_progress`.
    RunStepDetails:
      oneOf:
        - $ref: '#/components/schemas/RunStepDetailsMessageCreationObject'
        - $ref: '#/components/schemas/RunStepDetailsToolCallsObject'
      x-oaiExpandable: true
    RunStepDetailsMessageCreationObject:
      type: object
      required:
        - type
        - message_creation
      properties:
        type:
          type: string
          enum:
            - message_creation
          description: Details of the message creation by the run step.
        message_creation:
          type: object
          properties:
            message_id:
              type: string
              description: The ID of the message that was created by this run step.
          required:
            - message_id
      description: Details of the message creation by the run step.
    RunStepDetailsToolCallsCodeObject:
      type: object
      required:
        - id
        - type
        - code_interpreter
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - code_interpreter
          description: |-
            The type of tool call. This is always going to be `code_interpreter` for this type of tool
            call.
        code_interpreter:
          type: object
          properties:
            input:
              type: string
              description: The input to the Code Interpreter tool call.
            outputs:
              allOf:
                - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputs'
              description: |-
                The outputs from the Code Interpreter tool call. Code Interpreter can output one or more
                items, including text (`logs`) or images (`image`). Each of these are represented by a
                different object type.
          required:
            - input
            - outputs
          description: The Code Interpreter tool call definition.
      description: Details of the Code Interpreter tool call the run step was involved in.
    RunStepDetailsToolCallsCodeOutput:
      oneOf:
        - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject'
        - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject'
      x-oaiExpandable: true
    RunStepDetailsToolCallsCodeOutputImageObject:
      type: object
      required:
        - type
        - image
      properties:
        type:
          type: string
          enum:
            - image
          description: Always `image`.
        image:
          type: object
          properties:
            file_id:
              type: string
              description: The [file](/docs/api-reference/files) ID of the image.
          required:
            - file_id
    RunStepDetailsToolCallsCodeOutputLogsObject:
      type: object
      required:
        - type
        - logs
      properties:
        type:
          type: string
          enum:
            - logs
          description: Always `logs`.
        logs:
          type: string
          description: The text output from the Code Interpreter tool call.
      description: Text output from the Code Interpreter tool call as part of a run step.
    RunStepDetailsToolCallsCodeOutputs:
      type: array
      items:
        $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutput'
    RunStepDetailsToolCallsFunctionObject:
      type: object
      required:
        - id
        - type
        - function
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          enum:
            - function
          description: The type of tool call. This is always going to be `function` for this type of tool call.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments passed to the function.
            output:
              type: string
              nullable: true
              description: |-
                The output of the function. This will be `null` if the outputs have not been
                [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
          required:
            - name
            - arguments
            - output
          description: The definition of the function that was called.
    RunStepDetailsToolCallsObject:
      type: object
      required:
        - type
        - tool_calls
      properties:
        type:
          type: string
          enum:
            - tool_calls
          description: Always `tool_calls`.
        tool_calls:
          allOf:
            - $ref: '#/components/schemas/RunStepDetailsToolCallsObjectToolCallsItem'
          description: |-
            An array of tool calls the run step was involved in. These can be associated with one of three
            types of tools: `code_interpreter`, `retrieval`, or `function`.
      description: Details of the tool call.
    RunStepDetailsToolCallsObjectToolCall:
      oneOf:
        - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObject'
        - $ref: '#/components/schemas/RunStepDetailsToolCallsRetrievalObject'
        - $ref: '#/components/schemas/RunStepDetailsToolCallsFunctionObject'
      x-oaiExpandable: true
    RunStepDetailsToolCallsObjectToolCallsItem:
      type: array
      items:
        $ref: '#/components/schemas/RunStepDetailsToolCallsObjectToolCall'
    RunStepDetailsToolCallsRetrievalObject:
      type: object
      required:
        - id
        - type
        - retrieval
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          enum:
            - retrieval
          description: The type of tool call. This is always going to be `retrieval` for this type of tool call.
        retrieval:
          type: object
          description: For now, this is always going to be an empty object.
          x-oaiTypeLabel: map
    RunStepObject:
      type: object
      required:
        - id
        - object
        - created_at
        - assistant_id
        - thread_id
        - run_id
        - type
        - status
        - step_details
        - last_error
        - expires_at
        - cancelled_at
        - failed_at
        - completed_at
        - metadata
        - usage
      properties:
        id:
          type: string
          description: The identifier of the run step, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread.run.step
          description: The object type, which is always `thread.run.step`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the run step was created.
        assistant_id:
          type: string
          description: The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
        thread_id:
          type: string
          description: The ID of the [thread](/docs/api-reference/threads) that was run.
        run_id:
          type: string
          description: The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
        type:
          type: string
          enum:
            - message_creation
            - tool_calls
          description: The type of run step, which can be either `message_creation` or `tool_calls`.
        status:
          type: string
          enum:
            - in_progress
            - cancelled
            - failed
            - completed
            - expired
          description: |-
            The status of the run step, which can be either `in_progress`, `cancelled`, `failed`,
            `completed`, or `expired`.
        step_details:
          allOf:
            - $ref: '#/components/schemas/RunStepDetails'
          description: The details of the run step.
        last_error:
          type: object
          properties:
            code:
              type: string
              enum:
                - server_error
                - rate_limit_exceeded
              description: One of `server_error` or `rate_limit_exceeded`.
            message:
              type: string
              description: A human-readable description of the error.
          required:
            - code
            - message
          nullable: true
          description: The last error associated with this run step. Will be `null` if there are no errors.
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: |-
            The Unix timestamp (in seconds) for when the run step expired. A step is considered expired
            if the parent run is expired.
        cancelled_at:
          type: string
          format: date-time
          nullable: true
          description: The Unix timestamp (in seconds) for when the run step was cancelled.
        failed_at:
          type: string
          format: date-time
          nullable: true
          description: The Unix timestamp (in seconds) for when the run step failed.
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: T The Unix timestamp (in seconds) for when the run step completed..
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
        usage:
          type: object
          allOf:
            - $ref: '#/components/schemas/RunCompletionUsage'
          nullable: true
      description: Represents a step in execution of a run.
    RunToolCallObject:
      type: object
      required:
        - id
        - type
        - function
      properties:
        id:
          type: string
          description: |-
            The ID of the tool call. This ID must be referenced when you submit the tool outputs in using
            the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
        type:
          type: string
          enum:
            - function
          description: The type of tool call the output is required for. For now, this is always `function`.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments that the model expects you to pass to the function.
          required:
            - name
            - arguments
          description: The function definition.
      description: Tool call objects
    Stop:
      oneOf:
        - type: string
        - $ref: '#/components/schemas/StopSequences'
    StopSequences:
      type: array
      items:
        type: string
      minItems: 1
      maxItems: 4
    SubmitToolOutputsRunRequest:
      type: object
      required:
        - tool_outputs
      properties:
        tool_outputs:
          type: object
          properties:
            tool_call_id:
              type: string
              description: |-
                The ID of the tool call in the `required_action` object within the run object the output is
                being submitted for.
            output:
              type: string
              description: The output of the tool call to be submitted to continue the run.
          description: A list of tools for which the outputs are being submitted.
    SuffixString:
      type: string
      minLength: 1
      maxLength: 40
    ThreadObject:
      type: object
      required:
        - id
        - object
        - created_at
        - metadata
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread
          description: The object type, which is always `thread`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the thread was created.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
            additional information about the object in a structured format. Keys can be a maximum of 64
            characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
      description: Represents a thread that contains [messages](/docs/api-reference/messages).
    TokenArrayArray:
      type: array
      items:
        $ref: '#/components/schemas/TokenArrayItem'
      minItems: 1
    TokenArrayItem:
      type: array
      items:
        type: integer
        format: int64
      minItems: 1
    User:
      type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: https://api.openai.com/v1
    description: OpenAI Endpoint
    variables: {}
